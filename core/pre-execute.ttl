;; pre-execute.ttl
;; This file is the pre-execute core file.
;;
;; Usage:
;; Please place the following file in the project top directory.
;; 
;; prompt="pi@raspberrypi:.*\$"
;; include "core\pre-execute.ttl"
;; exit
;;

pe_title        = param1 ; param1 is the name of the macro that included this file.
pe_script_path  = "" ; Execute pre-formatted text path
pe_curdir       = "" ; Current directory
pe_date_begin   = "" ; Execution start time
pe_temp_run_dir = "" ; Temporary execution directory
pe_mode          = 0

call pe_main
exit

; Setting variables that are not pe_ prefixes
; (Variable set from external)
:pe_set_variable
  ; check prompt(Required parameter)
  ifdefined prompt
  if result <> 3 then
    sprintf2 __pe_tempstr "ERROR : prompt is not defined."
    messagebox __pe_tempstr pe_title
    exit
  endif
  pe_save_prompt = prompt

  ; check pre_text_file(Option)
  ifdefined pre_text_file
  if result <> 3 then
    filenamebox "Please select markdown or textile file." 0 pe_curdir
    pe_script_path = inputstr
    if result = 0 then
      messagebox "Cancel." pe_title
      exit
    endif
  else
    makepath pe_script_path pe_curdir pre_text_file
  endif

  ;; check expect/answer(Option)
  for __pe_i 0 8
    ifdefined expect[__pe_i]
    if result = 3 then
      strlen expect[__pe_i]
      if result = 0 then
        sprintf2 __pe_tempstr "ERROR : expect[%d] is null." __pe_i
        messagebox __pe_tempstr pe_title
        exit
      endif

      ifdefined answer[__pe_i]
      if result <> 3 then
        sprintf2 __pe_tempstr "ERROR : answer[%d] is not defined." __pe_i
        messagebox __pe_tempstr pe_title
        exit
      endif
      pe_mode = __pe_i + 1
    endif
  next

  ; check wait_msec(Option)
  ifdefined wait_msec
  if result = 0 then ; undefined
    wait_msec = 500 ;default 500msec
  endif
  ifdefined wait_msec
  if result <> 1 then ; not integer
    sprintf2 __pe_tempstr "ERROR : wait_msec is not integer."
    messagebox __pe_tempstr pe_title
    exit
  endif
  return

; Create a temporary working directory at the location indicated by the environment variable TEMP.
:pe_create_temp_dir
  pe_temp_dir_env  = "" ;
  pe_temp_dirname  = "pre-execute";
  pe_temp_root_dir = "" ;

  getenv "TEMP" pe_temp_dir_env
  makepath pe_temp_root_dir pe_temp_dir_env pe_temp_dirname
  foldersearch pe_temp_root_dir
  if result = 0 then
    foldercreate pe_temp_root_dir
  endif
  makepath pe_temp_run_dir pe_temp_root_dir pe_date_begin
  foldersearch pe_temp_run_dir
  if result = 0 then
    foldercreate pe_temp_run_dir
  endif
  return

; Parse the use section and concatenate it into one text file.
:pe_concat_pre_text
  pe_include_depth_max    = 1024
  pe_concat_pre_text_path = ""
  pe_concat_pre_text_fh   = 0
  pe_parse_depth = 0
  pe_parse_line  = ""
  pe_script_dir  = ""
  intdim pe_parse_fh pe_include_depth_max
  strdim pe_parse_path pe_include_depth_max
  intdim pe_parse_in_use_section pe_include_depth_max

  dirname pe_script_dir pe_script_path

  makepath pe_concat_pre_text_path pe_temp_run_dir "concat-pre-text"
  fileopen pe_concat_pre_text_fh pe_concat_pre_text_path 0 0
  if pe_concat_pre_text_fh = -1 then
    sprintf2 __pe_tempstr "ERROR : Can't open file %s." pe_concat_pre_text_path
    messagebox __pe_tempstr pe_title
    exit
  endif

  ; Open pre_text(depth is 0)
  pe_parse_path[pe_parse_depth] = pe_script_path
  fileopen pe_parse_fh[pe_parse_depth] pe_parse_path[pe_parse_depth] 0 1
  if pe_parse_fh[pe_parse_depth] = -1 then
    sprintf2 __pe_tempstr "ERROR : Can't open file %s." pe_parse_path[pe_parse_depth]
    messagebox __pe_tempstr pe_title
    fileclose pe_concat_pre_text_fh
    exit
  endif

  ; write concat_pre_text file
  while 1
    filereadln pe_parse_fh[pe_parse_depth] pe_parse_line
    if result = 1 then ; last line
      if pe_parse_depth = 0 then
        break
      endif

      ; write end-mark and depth
      sprintf2 __pe_tempstr "<!-- <<< depth[%d] %s -->" pe_parse_depth pe_parse_path[pe_parse_depth]
      filewriteln pe_concat_pre_text_fh __pe_tempstr
      ;; count --
      pe_parse_depth = pe_parse_depth - 1
      continue
    endif

    ; use start mark
    strmatch pe_parse_line "^\s*(<!--|~~~)use\s*$"
    if result <> 0 then
      if pe_parse_in_use_section[pe_parse_depth] = 1 then
        sprintf2 __pe_tempstr "ERROR : Unterminated <!--use section %s" pe_parse_path[pe_parse_depth]
        messagebox __pe_tempstr pe_title
        exit
      endif

      pe_parse_in_use_section[pe_parse_depth] = 1;
      continue
    endif

    ; In use section
    if pe_parse_in_use_section[pe_parse_depth] = 1 then
      ; --> : End use section
      strmatch pe_parse_line "^\s*(-->|~~~)"
      if result <> 0 then
        pe_parse_in_use_section[pe_parse_depth] = 0;
        continue
      endif

      ;; Read if it is not a blank line
      strmatch pe_parse_line "^\s*$"
      if result = 0 then;
        ;; count +1 (temp)
        pe_parse_depth_temp = pe_parse_depth + 1
        makepath pe_parse_path[pe_parse_depth_temp] pe_script_dir pe_parse_line
        getfileattr pe_parse_path[pe_parse_depth_temp]
        if result < 0 then
          sprintf2 __pe_tempstr "ERROR : File %s not exist." pe_parse_path[pe_parse_depth_temp]
          messagebox __pe_tempstr pe_title
          goto pe_parse_error
        endif
        fileopen pe_parse_fh[pe_parse_depth_temp] pe_parse_path[pe_parse_depth_temp] 0 1
        if pe_parse_fh[pe_parse_depth] = -1 then
          sprintf2 __pe_tempstr "ERROR : Can't open file %s." pe_parse_path[pe_parse_depth_temp]
          messagebox __pe_tempstr pe_title
          goto pe_parse_error
        endif

        ; file open success
        pe_parse_depth = pe_parse_depth + 1
        ; write start-mark and depth
        sprintf2 __pe_tempstr "<!-- >>> depth[%d] %s -->" pe_parse_depth pe_parse_path[pe_parse_depth]
        filewriteln pe_concat_pre_text_fh __pe_tempstr
        continue
      endif
    endif
    filewriteln pe_concat_pre_text_fh pe_parse_line
  endwhile
  fileclose pe_concat_pre_text_fh
  return
:pe_parse_error
  for __pe_i 0 pe_parse_depth
    fileclose pe_parse_fh[__pe_i]
  next
  exit

:pe_open_log_file
  pe_script_filename = "" ;
  pe_log_filename    = "" ;
  pe_log_filedir     = "" ;
  pe_log_filepath    = "" ;

  basename pe_script_filename pe_script_path
  makepath pe_log_filedir pe_curdir "log"
  foldercreate pe_log_filedir
  sprintf2 pe_log_filename "%s_%s.log" pe_date_begin pe_script_filename
  makepath pe_log_filepath pe_log_filedir pe_log_filename
  logautoclosemode 1
  logopen pe_log_filepath 0 0 0 0
  if result = 1 then
    sprintf2 __pe_tempstr "ERROR : Can't open log file %s." pe_log_filepath
    messagebox __pe_tempstr pe_title
    exit
  endif
  return

:pe_clear_recv_buf
  flushrecv
  mpause 50
  flushrecv
  mpause 50
  return

:pe_wait_prompt
  if pe_mode = 0 then
    waitregex prompt
    pe_wait_idx = result
  elseif pe_mode = 1 then
    waitregex prompt expect[0]
    pe_wait_idx = result
  elseif pe_mode = 2 then
    waitregex prompt expect[0] expect[1]
    pe_wait_idx = result
  elseif pe_mode = 3 then
    waitregex prompt expect[0] expect[1] expect[2]
    pe_wait_idx = result
  elseif pe_mode = 4 then
    waitregex prompt expect[0] expect[1] expect[2] expect[3]
    pe_wait_idx = result
  elseif pe_mode = 5 then
    waitregex prompt expect[0] expect[1] expect[2] expect[3] expect[4]
    pe_wait_idx = result
  elseif pe_mode = 6 then
    waitregex prompt expect[0] expect[1] expect[2] expect[3] expect[4] expect[5]
    pe_wait_idx = result
  elseif pe_mode = 7 then
    waitregex prompt expect[0] expect[1] expect[2] expect[3] expect[4] expect[5] expect[6]
    pe_wait_idx = result
  elseif pe_mode = 8 then
    waitregex prompt expect[0] expect[1] expect[2] expect[3] expect[4] expect[5] expect[6] expect[7]
    pe_wait_idx = result
  elseif pe_mode = 9 then
    waitregex prompt expect[0] expect[1] expect[2] expect[3] expect[4] expect[5] expect[6] expect[7] expect[8]
    pe_wait_idx = result
  endif

  call pe_clear_recv_buf

  if pe_wait_idx = 1 then
    return
  elseif 2 <= pe_wait_idx then
    strlen answer[pe_wait_idx - 2]
    if result = 0 then
       return
    endif
    sendln answer[pe_wait_idx - 2]
    goto pe_wait_prompt
  endif
  return

:pe_main
  pe_read_line_num           = 0  ;
  pe_ttl_code_section        = 0  ; In teraterm code comment
  pe_md_program_section      = 0  ; In pre block in markdown format
  pe_textile_program_section = 0  ; In pre block in textile format
  pe_html_comment_section    = 0  ; In html comment in html format
  pe_read_command            = "" ;
  pe_script_fh               = 0  ;
  pe_temp_ttl_filename       = "" ;
  pe_temp_ttl_filepath       = "" ;
  pe_temp_ttl_absolute_path  = "" ;
  pe_ttl_start_line          = 0  ;
  pe_ttl_end_line            = 0  ;

  getdir pe_curdir
  getdate pe_date_begin "%Y-%m-%d-%H.%M.%S"
  setdlgpos 0 0
  call pe_clear_recv_buf
  call pe_set_variable
  call pe_create_temp_dir
  call pe_concat_pre_text
  call pe_open_log_file

  fileopen pe_script_fh pe_concat_pre_text_path 0 1
  if pe_script_fh = -1 then
    sprintf2 __pe_tempstr "ERROR : Can't open file %s." pe_concat_pre_text_path
    messagebox __pe_tempstr pe_title
    goto pe_end
  endif

  ; main loop
  while 1
    filereadln pe_script_fh pe_read_command
    if result = 1 then
      break
    endif
    pe_read_line_num = pe_read_line_num + 1

    ; ``` : Start or end preformatted text in markdown form
    strmatch pe_read_command "^\s*```"
    if result <> 0 then
      pe_md_program_section = !pe_md_program_section
      continue
    endif

    ; <pre> : Start preformatted text in textile form
    ; </pre> : End preformatted text in textile form
    strmatch pe_read_command "^\s*</?pre>"
    if result <> 0 then
      pe_textile_program_section = !pe_textile_program_section
      continue
    endif

    ; <!--.* --> : html 1line comment
    strmatch pe_read_command "^.*<!--(?!ttl).*-->.*$"
    if result <> 0 then
      continue
    endif

    ; <!--ttl
    ; Generate temporary file for executing teraterm macro code
    strmatch pe_read_command "^\s*<!--ttl\s*$"
    if result <> 0 then
      sprintf2 pe_temp_ttl_filename "line_%04d.ttl" pe_read_line_num
      makepath pe_temp_ttl_filepath pe_temp_run_dir pe_temp_ttl_filename
      fileopen pe_temp_ttl_fh pe_temp_ttl_filepath 0 0
      if pe_script_fh = -1 then
        sprintf2 __pe_tempstr "ERROR : Can't open file %s." pe_temp_ttl_filepath
        messagebox __pe_tempstr pe_title
        goto pe_end
      endif
      pe_ttl_code_section = 1
      pe_ttl_start_line   = pe_read_line_num + 1
      pe_ttl_end_line     = 0
      continue
    endif

    ; <-- : Start html comment
    strmatch pe_read_command "^.*<!--(?!ttl)"
    if result <> 0 then
      pe_html_comment_section = 1
    endif

    ; --> : End html comment
    strmatch pe_read_command "^\s*-->"
    if result <> 0 then
      ; normal comment?
      if pe_html_comment_section then
        pe_html_comment_section = !pe_html_comment_section
        continue
      elseif !pe_ttl_code_section then
        sprintf2 __pe_tempstr "ERROR : LINE %04d %s : Unterminated html code block." pe_read_line_num pe_read_command
        messagebox __pe_tempstr pe_title
        goto pe_end
      endif

      ; Finish writing temporary file and execute
      pe_ttl_code_section = 0
      pe_ttl_end_line = pe_read_line_num - 1
      fileclose pe_temp_ttl_fh
      ;sprintf2  __pe_tempstr "EXEC : INLINE-TTL / FILE : %s (LINE %04d - %04d)" pe_concat_pre_text_path pe_ttl_start_line pe_ttl_end_line
      __pe_tempstr = "EXEC : INLINE-TTL "
      sprintf2  temp_ttl_fix_file "line_%04d-%04d" pe_ttl_start_line pe_ttl_end_line
      makepath pe_temp_ttl_absolute_path pe_temp_run_dir temp_ttl_fix_file
      filerename  pe_temp_ttl_filepath pe_temp_ttl_absolute_path
      if result <> 0 then
        sprintf2 __pe_tempstr "ERROR : Can't rename file %s." pe_temp_ttl_filepath
        messagebox __pe_tempstr pe_title
        goto pe_end
      endif
      statusbox __pe_tempstr pe_title
      mpause wait_msec
      include pe_temp_ttl_absolute_path
      continue
    endif

    ; Write temporary file for executing teraterm macro code
    if pe_ttl_code_section then
      filewriteln pe_temp_ttl_fh pe_read_command
      continue
    endif

    if pe_md_program_section || pe_textile_program_section then
      ;sprintf2 __pe_tempstr "EXEC : %s  / FILE : %s (LINE %04d)" pe_read_command pe_concat_pre_text_path pe_read_line_num
      sprintf2 __pe_tempstr "EXEC : %s" pe_read_command
      setdlgpos 0 0
      statusbox __pe_tempstr pe_title
      mpause wait_msec

      ; Execute preformatted text
      sendln pe_read_command
      call pe_wait_prompt
    endif
  endwhile

  if pe_md_program_section  then
    messagebox "ERROR : Unterminated markdown preformatted text." pe_title
  endif
  if pe_textile_program_section  then
    messagebox "ERROR : Unterminated textile preformatted text." pe_title
  endif
  if pe_ttl_code_section then
    messagebox "ERROR : Unterminated ttl block." pe_title
  endif
  if pe_html_comment_section then
    messagebox "ERROR : Unterminated html comment block." pe_title
  endif

:pe_end
  closesbox
  fileclose pe_script_fh
  logclose
  exit
